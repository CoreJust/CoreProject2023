import core.io.console;
import core.crt.cstdlib;
import core.crt.cstring;
import core.time.timer;

use console;

struct DynamicString {
	private c8* data;
	private u64 capacity;
	private u64 size;


	# Constructors
	@implicit
	def this(str8 str) {
		this.size = this.capacity = str.size;
		this.data = c8*(cstdlib.malloc(this.size));
		cstring.strncpy(this.data, str.data, str.size);
	}
	
	def this() {
		this.size = 0;
		this.capacity = 24;
		this.data = c8*(cstdlib.calloc(this.capacity, 1));
	}
	
	# Member functions
	def public append(str8 str) {
		c8* insert_from = this.data + this.size;
		this.size = this.size + str.size;
		if (this.size > this.capacity) {
			this.data = c8*(cstdlib.realloc(u8*(this.data), this.size));
			this.capacity = this.size;
		}
		
		cstring.strncpy(insert_from, str.data, str.size);
	}
	
	def public append(const DynamicString& str) {
		c8* insert_from = this.data + this.size;
		this.size = this.size + str.size;
		if (this.size > this.capacity) {
			this.data = c8*(cstdlib.realloc(u8*(this.data), this.size));
			this.capacity = this.size;
		}
		
		cstring.strncpy(insert_from, str.data, str.size);
	}
	
	def public size() u64 = this.size;
	
	# Operators
	# Assignment
	def public +=(str8 str) DynamicString& {
		this.append(str);
		return this;
	}
	
	def public +=(const DynamicString& other) DynamicString& {
		this.append(other);
		return this;
	}
	
	# Comparison
	def public ==(const DynamicString& other) bool {
		if this.size != other.size
			return false;
			
		return cstring.strncmp(this.data, other.data, this.size) == 0;
	}
	
	# Other
	def public [](u64 idx) c8& {
		return this.data[idx];
	}
	
	def public *() str8 {
		return str8(this.data, this.size);
	}
	
	def public +(const DynamicString& other) DynamicString {
		DynamicString result = DynamicString();
		result.append(this);
		result.append(other);
		
		return result;
	}
	
	public static str8 typeName = "String";
}

def main() i32 {
	DynamicString str = "Hello ";
	str += "world from ";
	str += DynamicString(DynamicString.typeName);
	
	i32 i = 0;
	while i < str.size() {
		console.println(str[i]);
		i++;
	}
	
	timer.Timer timer = timer.Timer();
	while (true) {
		if (timer.elapsedTimeAsSeconds() > 2.5) {
			console.println(*str);
			timer.restart();
		}
	}
	
	console.pause();
	return 0;
}