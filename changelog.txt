Initial development
23.01.2023
	Made an initial commit
	Created docs and CoreStdLib directories
	Copied language docs from old CoreProject
	Copied and edited Token and Lexer files from old CoreProject
	Created (partialy copied from old CoreProject) Utils/Defs, Utils/String, Utils/ErrorManager, Utils/File
	Copied Module/Annotations
	Created Lexer/ImportHandler
	Added extensions for git to ignore
	
	Commited as "Added Lexer"
	
	
	Included LLVM
	Copied INode, Expression, ValueExpr, Visitor
	Started experiments with LLVM (partial success)

26.01.2023
	Added Statement and Declaration basic classes (interfaces)
	In documentation, the language part, the owning concept, ref, move operators, overloaded function choosing were added
	In documentation, the annotations @move_only and @prefer were presented
	Parser module partially copied from old CoreProject
	Added simple compilation (must be edited)
	Now can compile and print a character with some code

	Commited as "Added Parser and simple compilation"

27.01.2023
	Added new Error management (with ErrorID, e.g. E1001, W1001)
	Added format strings' handling to lexer
	Began adding functions
	Created modules FunctionDeclaration, FunctionPrototype

29.01.2023
	Started adding symbol handling
	Created modules Compiler, ModuleSymbols, SymbolTable
	Module main.cpp cleaned, most of the content is moved to module Compiler
	Created modules Variable, Function, FunctionArgument
	Edited imports documentation
	Created module SymbolLoader

30.01.2023
	Created module Project
	Remade module Compiler, it's working now
	Created modules ReturnStatement, BlockStatemen, VariableDeclaration, FunctionExpr, FunctionCallExpr
	
	Commited as "Added functions and global variables"

31.01.2023
	Created a repository on GitHub, pushed the local repository there (in process, deleted large files from old commits)
	Fixed bug when compiler generated a new set of .o files each time (file.o, file1.o, file2.o, etc)
	Added new llvm PassManagers
	Fixed bug: program fails when freeing resources (somewhere in llvm destructors), used quick_exit(0)

	Commited as "Some bug fixes, new llvm PassManager"

01.02.2023
	Fixed bug with inability to use functions/variables, declared in imported modules
	Fixed bug when global constructors were created for global variables, initialized with a constant
	Started implementing type system
	Created modules LLVMUtils, Type, TypeNode, BasicType

02.02.2023
	Created modules Value, TypeParser

05.02.2023
	Some progress on creating type system: type parsing
	Note: typeof is parsed correctly, but only if the expression is a variable or a function
	Created module TypeConversionExpr

06.02.2023
	Added tools for type conversion, type system is mostly ready, apart from user-defined types
	Working type system

	Commited as "Added type system (without user-defined types), literals"

	Added function using function arguments in function body
	Created module VariableDefStatement
	Added local variables

	Commited as "Added local variables"

07.02.2023
	Fixed local variables' bug (incorect handling)
	Created module AssignmentExpr
	Added rvalue generation to all expressions

	Commited as "Added assignment"

	Fixed bug with return of value of type different from function's
	Created module BinaryExpression
	Added most arithmetical and bitwise operators, &&, ||
	Fixed bug with function type variables (impossible to create)
	Fixed bug with global variables' initialization (impossible to init if not with a constant)
	Fixed bug when number literals could not be used as types lesser than default without stating type postfix
		(e.g. i16 a = 10; caused an error, since 10 is i32, and i32 cannot be implicitly converted to i16)

	Commited as "Added some binary expressions (arithmetic, bitwise...), bug fixes"

08.02.2023
	Created module IfElseStatement
	Fixed bug with incorrect bool to int conversion

	Commited as "Added if-elif-else statement"

09.02.2023
	Created module UnaryExpr
	Added parens in expressions to state priority

	Commited as "Added unary expressions"

10.02.2023
	Created modules CycleStatement, Cycles (partially copied from old project)
	Fixed bug with terminators (return) in if's and while's (incorrect compiling)
	Fixed bug with initializing reference-type variables

	Commited as "Added while cycle, bug fixes"

	Added va_args (only as argument ...)
	Fixed bug with null being inconvertible implicitly to other pointer-types
	Started to create an interface for C standard library functions (core.crt.stdio),
		created all the other modules of CRT that could be (partially) implemented

11.02.2023
	Added noexcept and noreturn annotations, added @set mangling (mangle/nomangle) module annotation
	Mostly implemented core.crt.cstdlib
	Fixed bug with impossibility to state function-type's argument as const
	Fixed several bugs with type parsing
	Fixed bug with incorrect function annotations parsing in some cases
	Fixed bug with global variables (cannot get its value by name if it is not in current module's namespace)

	Commited as "Core standard library's cstdio and cstdlib, va_args (...) as function argument"

	Fixed multiline comments (the closing ### must be on a new line)
	Added multiline string ("""..."""), usual string cannot be used as such anymore
	
	Commited as "Fixed mutliline comments, added multiline string literals"
	
	Added @thread_local for global variables
	Created module LLVMGlobals for global variables (moved from INode)
	Some refactoring

	Commited as "Refactoring, @thread_local annotation"

	Added name mangling for functions

12.02.2023
	Completely implemented function overloading
	Fixed bug with const compile-time str8 to str8 conversion (failed with error)

	Commited as "Function overloading"

	Implemented core.crt.cstring and core.crt.cmath (<c++11)
	Fixed bug when '\r' was not considered a new line, although it is
	Created module ConditionalExpr

	Implemented core.io.console (print, println, scan-type-)

	Commited as "Conditional expressions, core.crt.cstring, core.crt.cmath, core.io.console"

	Added module/function/variables aliases (available only within one module)
	Added type aliases (type -alias- = -type-;)

	Commited as "Aliases"

	Added structure type (only fields)
	Created module FieldAccessExpr

	Symbols loading reviewed
	Created modules ModulePeeker, BasicParser, BasicSymbolLoader, SymbolPreloader
	Deleted module SymbolTable (its functionality was moved to ModuleList)

	Commited as "Structures (with fields only)"

15.02.2023
	Added constructors (def type -type-(...), def this(...))
	Created modules SymbolRef, TypeDeclaration, MethodDeclaration, FieldDeclaration

	Commited as "Constructors"