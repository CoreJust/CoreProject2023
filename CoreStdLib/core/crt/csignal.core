# csignal.core - the standard core library module that is an interface with C signal functions.
@set visibility direct_import
@set safety unsafe
@set mangling nomangle


# Constants and types are platform-specific

type sig_atomic_t = i32;
type _crt_signal_t = func(i32);

const u8 SIGINT   = 2;   # interrupt
const u8 SIGILL   = 4;   # illegal instruction - invalid function image
const u8 SIGFPE   = 8;   # floating point exception
const u8 SIGSEGV  = 11;  # segment violation
const u8 SIGTERM  = 15;  # Software termination signal from kill
const u8 SIGBREAK = 21;  # Ctrl-Break sequence
const u8 SIGABRT  = 22;  # abnormal termination triggered by abort call

const u8 SIGABRT_COMPAT = 6;   # SIGABRT compatible with other platforms, same as SIGABRT

const _crt_signal_t SIG_DFL = _crt_signal_t(0);     # default signal action
const _crt_signal_t SIG_IGN = _crt_signal_t(1);     # ignore signal
const _crt_signal_t SIG_GET = _crt_signal_t(2);     # return current value
const _crt_signal_t SIG_SGE = _crt_signal_t(3);     # signal gets error
const _crt_signal_t SIG_ACK = _crt_signal_t(4);     # acknowledge

const _crt_signal_t SIG_ERR = _crt_signal_t(-1);    # signal error value


def native signal(i32 sig, _crt_signal_t handler) _crt_signal_t;
def native raise(i32 sig) i32;