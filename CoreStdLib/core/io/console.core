# console.core - the module implementing console I/O functions
@set visibility direct_import
@set safety safe
@set default_imports false
import core.crt.cstdio;
import core.crt.cstdlib;
import core.utils.format;

def pause() {
	cstdlib.system("pause");
}

def newline() {
	cstdio.putchar(i32('\n'));
}

# Prints the value to the console
def print(const str8 str) {
	cstdio.fwrite(u8*(str.data), 1, str.size, cstdio.stdout);
}

def print(const c8* str) {
	cstdio.fputs(str, cstdio.stdout);
}

def print(c8 ch){
	cstdio.putchar(i32(ch));
}

def print(i32 i) {
	const c8* asStr = format.static_tostr(i);
	cstdio.fputs(asStr, cstdio.stdout);
}

def print(i64 i) {
	const c8* asStr = format.static_tostr(i);
	cstdio.fputs(asStr, cstdio.stdout);
}

def print(u64 i) {
	const c8* asStr = format.static_tostr(i);
	cstdio.fputs(asStr, cstdio.stdout);
}

def print(f64 i) = cstdio.printf("%f", i); # TODO: optimize

def print(bool b) {
	const c8* asStr = format.static_tostr(b);
	cstdio.fputs(asStr, cstdio.stdout);
}

# Prints the value to console and prints a new line
def println(const str8 str) {
	cstdio.fwrite(u8*(str.data), 1, str.size, cstdio.stdout);
	cstdio.putchar(i32('\n'));
}

def println(const c8* str) {
	cstdio.puts(str);
}

def println(c8 ch) {
	static c8[3] s_buff = { ' ', '\n', '\0' };
	s_buff[0] = ch;
	cstdio.fputs(c8*(s_buff), cstdio.stdout);
}

def println(i32 i) {
	const c8* asStr = format.static_tostr(i);
	cstdio.puts(asStr);
}

def println(i64 i) {
	const c8* asStr = format.static_tostr(i);
	cstdio.puts(asStr);
}

def println(u64 i) {
	const c8* asStr = format.static_tostr(i);
	cstdio.puts(asStr);
}

def println(f64 i) = cstdio.printf("%f\n", i);

def println(bool b) {
	const c8* asStr = format.static_tostr(b);
	cstdio.puts(asStr);
}


# Scans a value from the console and returns it.
# If the input does not contain a value of the type needed, the default value is returned
def scanc8() c8 = c8(cstdio.getchar());

def scani64() i64 {
	return scani64(0);
}

def scanu64() u64 {
	return scanu64(0);
}

def scanf64() f64 {
	return scanf64(0);
}

# Scans a value from the console and returns it.
# If the input does not contain a value of the type needed, the argument is returned
def scani64(i64 default_value) i64 {
	i64 result;
	if (cstdio.scanf("%lld", &result)) {
		return result;
	} else {
		return default_value;
	}
}

def scanu64(u64 default_value) u64 {
	u64 result;
	if (cstdio.scanf("%llu", &result)) {
		return result;
	} else {
		return default_value;
	}
}

def scanf64(f64 default_value) f64 {
	f64 result;
	if (cstdio.scanf("%f", &result)) {
		return result;
	} else {
		return default_value;
	}
}